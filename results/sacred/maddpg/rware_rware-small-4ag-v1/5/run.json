{
  "artifacts": [],
  "command": "my_main",
  "experiment": {
    "base_dir": "E:\\study\\Thesis\\epymarl\\src",
    "dependencies": [
      "munch==2.5.0",
      "numpy==1.21.5",
      "sacred==0.8.2",
      "torch==1.13.1"
    ],
    "mainfile": "main.py",
    "name": "pymarl",
    "repositories": [
      {
        "commit": "f355a55262ac9afecdb53368fec6337c549cc160",
        "dirty": true,
        "url": "https://github.com/uoe-agents/epymarl.git"
      },
      {
        "commit": "f355a55262ac9afecdb53368fec6337c549cc160",
        "dirty": true,
        "url": "https://github.com/uoe-agents/epymarl.git"
      },
      {
        "commit": "f355a55262ac9afecdb53368fec6337c549cc160",
        "dirty": true,
        "url": "https://github.com/uoe-agents/epymarl.git"
      }
    ],
    "sources": [
      [
        "main.py",
        "_sources\\main_6154811e6ff98cbcbe37f66b1cb5b257.py"
      ],
      [
        "run.py",
        "_sources\\run_7a51d15b16bb2f32be372092fd89818e.py"
      ],
      [
        "utils\\logging.py",
        "_sources\\logging_f07e332904eb54377f5315f99ee08c08.py"
      ]
    ]
  },
  "fail_trace": [
    "Traceback (most recent call last):\n",
    "  File \"E:\\Anaconda\\envs\\epymarl\\lib\\site-packages\\wrapt\\wrappers.py\", line 523, in __call__\n    args, kwargs)\n",
    "  File \"E:\\Anaconda\\envs\\epymarl\\lib\\site-packages\\sacred\\config\\captured_function.py\", line 42, in captured_function\n    result = wrapped(*args, **kwargs)\n",
    "  File \"main.py\", line 40, in my_main\n    run(_run, config, _log)\n",
    "  File \"E:\\study\\Thesis\\epymarl\\src\\run.py\", line 62, in run\n    run_sequential(args=args, logger=logger)\n",
    "  File \"E:\\study\\Thesis\\epymarl\\src\\run.py\", line 131, in run_sequential\n    device=\"cpu\" if args.buffer_cpu_only else args.device,\n",
    "  File \"E:\\study\\Thesis\\epymarl\\src\\components\\episode_buffer.py\", line 210, in __init__\n    super(ReplayBuffer, self).__init__(scheme, groups, buffer_size, max_seq_length, preprocess=preprocess, device=device)\n",
    "  File \"E:\\study\\Thesis\\epymarl\\src\\components\\episode_buffer.py\", line 28, in __init__\n    self._setup_data(self.scheme, self.groups, batch_size, max_seq_length, self.preprocess)\n",
    "  File \"E:\\study\\Thesis\\epymarl\\src\\components\\episode_buffer.py\", line 75, in _setup_data\n    self.data.transition_data[field_key] = th.zeros((batch_size, max_seq_length, *shape), dtype=dtype, device=self.device)\n",
    "RuntimeError: [enforce fail at C:\\cb\\pytorch_1000000000000\\work\\c10\\core\\impl\\alloc_cpu.cpp:72] data. DefaultCPUAllocator: not enough memory: you tried to allocate 28456800000 bytes.\n"
  ],
  "heartbeat": "2023-06-07T11:46:11.867698",
  "host": {
    "ENV": {},
    "cpu": "Unknown",
    "gpus": {
      "driver_version": "516.01",
      "gpus": [
        {
          "model": "NVIDIA GeForce MX150",
          "persistence_mode": false,
          "total_memory": 2048
        }
      ]
    },
    "hostname": "Jiong",
    "os": [
      "Windows",
      "Windows-10-10.0.22000-SP0"
    ],
    "python_version": "3.7.16"
  },
  "meta": {
    "command": "my_main",
    "options": {
      "--beat-interval": null,
      "--capture": null,
      "--comment": null,
      "--debug": false,
      "--enforce_clean": false,
      "--file_storage": null,
      "--force": false,
      "--help": false,
      "--loglevel": null,
      "--mongo_db": null,
      "--name": null,
      "--pdb": false,
      "--print-config": false,
      "--priority": null,
      "--queue": false,
      "--s3": null,
      "--sql": null,
      "--tiny_db": null,
      "--unobserved": false,
      "COMMAND": null,
      "UPDATE": [
        "env_args.time_limit=500",
        "env_args.key=rware:rware-small-4ag-v1"
      ],
      "help": false,
      "with": true
    }
  },
  "resources": [],
  "result": null,
  "start_time": "2023-06-07T11:46:11.289261",
  "status": "FAILED",
  "stop_time": "2023-06-07T11:46:11.922234"
}
{
  "artifacts": [],
  "command": "my_main",
  "experiment": {
    "base_dir": "E:\\study\\Thesis\\epymarl\\src",
    "dependencies": [
      "munch==2.5.0",
      "numpy==1.21.5",
      "PyYAML==6.0",
      "sacred==0.8.2",
      "torch==1.6.0"
    ],
    "mainfile": "main.py",
    "name": "pymarl",
    "repositories": [
      {
        "commit": "f355a55262ac9afecdb53368fec6337c549cc160",
        "dirty": true,
        "url": "https://github.com/uoe-agents/epymarl.git"
      },
      {
        "commit": "f355a55262ac9afecdb53368fec6337c549cc160",
        "dirty": true,
        "url": "https://github.com/uoe-agents/epymarl.git"
      },
      {
        "commit": "f355a55262ac9afecdb53368fec6337c549cc160",
        "dirty": true,
        "url": "https://github.com/uoe-agents/epymarl.git"
      }
    ],
    "sources": [
      [
        "main.py",
        "_sources\\main_d3147fe5aee4912fb1242db28465f46b.py"
      ],
      [
        "run.py",
        "_sources\\run_fca7569cd3431950598e841e4242dc3e.py"
      ],
      [
        "utils\\logging.py",
        "_sources\\logging_7ddc698bb74674bae897bfdc5662ed00.py"
      ]
    ]
  },
  "fail_trace": [
    "Traceback (most recent call last):\n",
    "  File \"E:\\Anaconda\\envs\\di_engine\\lib\\site-packages\\wrapt\\wrappers.py\", line 523, in __call__\n    args, kwargs)\n",
    "  File \"E:\\Anaconda\\envs\\di_engine\\lib\\site-packages\\sacred\\config\\captured_function.py\", line 42, in captured_function\n    result = wrapped(*args, **kwargs)\n",
    "  File \"src/main.py\", line 39, in my_main\n    run(_run, config, _log)\n",
    "  File \"E:\\study\\Thesis\\epymarl\\src\\run.py\", line 55, in run\n    run_sequential(args=args, logger=logger)\n",
    "  File \"E:\\study\\Thesis\\epymarl\\src\\run.py\", line 87, in run_sequential\n    runner = r_REGISTRY[args.runner](args=args, logger=logger)\n",
    "  File \"E:\\study\\Thesis\\epymarl\\src\\runners\\episode_runner.py\", line 15, in __init__\n    self.env = env_REGISTRY[self.args.env](**self.args.env_args)\n",
    "  File \"E:\\study\\Thesis\\epymarl\\src\\envs\\__init__.py\", line 14, in env_fn\n    return env(**kwargs)\n",
    "  File \"E:\\study\\Thesis\\epymarl\\src\\envs\\__init__.py\", line 82, in __init__\n    self.original_env = gym.make(f\"{key}\", **kwargs)\n",
    "  File \"E:\\Anaconda\\envs\\di_engine\\lib\\site-packages\\gym\\envs\\registration.py\", line 569, in make\n    _check_version_exists(ns, name, version)\n",
    "  File \"E:\\Anaconda\\envs\\di_engine\\lib\\site-packages\\gym\\envs\\registration.py\", line 219, in _check_version_exists\n    _check_name_exists(ns, name)\n",
    "  File \"E:\\Anaconda\\envs\\di_engine\\lib\\site-packages\\gym\\envs\\registration.py\", line 198, in _check_name_exists\n    f\"Environment {name} doesn't exist{namespace_msg}. {suggestion_msg}\"\n",
    "gym.error.NameNotFound: Environment lbforaging-Foraging-10x10-3p-3f doesn't exist. \n"
  ],
  "heartbeat": "2023-03-26T11:51:13.159613",
  "host": {
    "ENV": {},
    "cpu": "Unknown",
    "gpus": {
      "driver_version": "511.69",
      "gpus": [
        {
          "model": "NVIDIA GeForce MX150",
          "persistence_mode": false,
          "total_memory": 2048
        }
      ]
    },
    "hostname": "Jiong",
    "os": [
      "Windows",
      "Windows-10-10.0.22000-SP0"
    ],
    "python_version": "3.7.16"
  },
  "meta": {
    "command": "my_main",
    "options": {
      "--beat-interval": null,
      "--capture": null,
      "--comment": null,
      "--debug": false,
      "--enforce_clean": false,
      "--file_storage": null,
      "--force": false,
      "--help": false,
      "--loglevel": null,
      "--mongo_db": null,
      "--name": null,
      "--pdb": false,
      "--print-config": false,
      "--priority": null,
      "--queue": false,
      "--s3": null,
      "--sql": null,
      "--tiny_db": null,
      "--unobserved": false,
      "COMMAND": null,
      "UPDATE": [
        "env_args.key=lbforaging-Foraging-10x10-3p-3f-v2"
      ],
      "help": false,
      "with": true
    }
  },
  "resources": [],
  "result": null,
  "start_time": "2023-03-26T11:51:13.123019",
  "status": "FAILED",
  "stop_time": "2023-03-26T11:51:13.162709"
}